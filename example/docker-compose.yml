version: '3.1'


services:
    db:
      build:
        context: .
        dockerfile: ./postgres/Dockerfile
      image: localhost/postgres-backoffice/postgres
      environment:
        - POSTGRES_USER=db_user
        - POSTGRES_PASSWORD=db_password
        - POSTGRES_DB=postgres_db
      ports:
        - 5432:5432
      healthcheck:
        test: [ "CMD-SHELL", "pg_isready -U db_user -d postgres_db" ]
        interval: 5s
        timeout: 30s
        retries: 3
      networks:
        - postgres-backoffice

    postgrest:
      image: docker.io/postgrest/postgrest
      environment:
        - PGRST_DB_URI=postgres://db_user:db_password@db/postgres_db
        - PGRST_JWT_SECRET=6oKDJMClxO1/6GiWRIvfYocH/w4yPerCHyV0BmAQius=
        - PGRST_DB_SCHEMA=api
        - PGRST_DB_ANON_ROLE=app_anon
      depends_on:
        db: { condition: service_healthy }
      networks:
        - postgres-backoffice

    nginx:
      image: docker.io/openresty/openresty:alpine
      volumes:
        - ./nginx/conf.d:/etc/nginx/conf.d
      ports:
        - 8080:8080
      depends_on:
        - postgrest
      networks:
        - postgres-backoffice

    migrator:
      build:
        context: .
        dockerfile: ./migrator/Dockerfile
      image: localhost/postgres-backoffice/migrator
      volumes:
        - ./migrator/migrations:/migrations
      environment:
        - DATABASE_URL=postgres://db_user:db_password@db/postgres_db
      depends_on:
        db: { condition: service_healthy }
      entrypoint: /bin/sh -c "sequel -E -m /migrations $$DATABASE_URL"
      networks:
        - postgres-backoffice


networks:
  postgres-backoffice: {}
